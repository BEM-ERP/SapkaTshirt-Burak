@model OzSapkaTShirt.Models.Order

@if (Model == null)
{
    <h2>Sepetim</h2>
    <hr>
    <p>Sepetiniz boş.</p>
}
else
{
    <h2>Sepetim</h2>
    <h2>Sipariş Detayları</h2>

    <div class="row">
        <div class="col-md-6">
            <dl class="dl-horizontal">
                <dt>Tarih:</dt>
                <dd>@Model.OrderDate.ToShortDateString()</dd>
                <dt>Sipariş Toplam:</dt>
                <dd>@Model.TotalPrice.ToString("C2")</dd>
                <dt>Durum:</dt>
                <dd>@GetStatusName(Model.Status)</dd>
            </dl>
        </div>
    </div>

    <h3>Sipariş Ürünleri</h3>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Ürün Adı</th>
                <th>Ürün Resmi</th>
                <th>Adet</th>
                <th>Ürün Fiyat</th>
                <th>Ürün Adet Toplam</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var orderProduct in Model.OrderProducts)
            {
                <tr>
                    <td>@orderProduct.Product?.Name</td>
                    <td><img class="card-img" src="data:image/png;base64,@(Convert.ToBase64String(orderProduct.Product?.ThumbNail))" style="width:50px;display:block" /></td>
                    <td>
                        <div class="quantity">
                            <i style="margin:auto; border:1px solid; "  class="fa-solid fa-minus" onClick="UpDateBasket('@orderProduct.ProductId', -1)"></i>
                            @orderProduct.Quantity
                            <i style="margin:auto"  class="fa-solid fa-plus" onClick="UpDateBasket('@orderProduct.ProductId', 1)"></i>
                        </div>
                    </td>
                    <td>@orderProduct.Price.ToString("C2")</td>
                    @{
                        var urunToplam = orderProduct.Quantity * orderProduct.Price;
                    }
                    <td>@urunToplam.ToString("C2")</td>
                    <td><i class="fa-solid fa-trash" onclick="RemoveOrderProduct('@orderProduct.ProductId')"></i></td>
                </tr>
            }
        </tbody>
    </table>
        

    <div id="successMessage" class="alert alert-success" style="display: none;"></div>
    <div class="message-container"></div>
    <script src="https://kit.fontawesome.com/54ee7b90a1.js" crossorigin="anonymous"></script>
    <script>



        function UpDateBasket(productId, quantity) {
            if (quantity === 0) {
                if (!confirm("Ürünü sepetten kaldırmak istediğinizden emin misiniz?")) {
                    return;
                }
            } else {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("UpDateBasket","OrderProducts")/" + productId + "?quantity=" + quantity,
                    success: function (result) {
                        if (quantity < 0) {
                            showMessage("Ürün adedi azaltıldı.", "success");
                        } else {
                            showMessage("Ürün adedi artırıldı.", "success");
                        }
                        location.reload(); // Sayfayı yenile
                    },
                    error: function (error) {
                        showMessage("Ürün güncellenirken bir hata oluştu.", "error");
                    }
                });
            }
        }







        function RemoveOrderProduct(productId) {
            if (confirm("Ürünü sepetten kaldırmak istediğinizden emin misiniz?")) {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("RemoveOrderProduct","OrderProducts")/" + productId,
                    success: function (result) {
                        // Sayfayı yenilemeden önce mesajı göstermek için
                        $("#successMessage").text("Ürün başarıyla silindi.").show();
                        setTimeout(function () {
                            $("#successMessage").fadeOut("slow", function () {
                                $(this).remove();
                            });
                        }, 3000); // 3 saniye sonra mesajı gizle
                        location.reload(); // Sayfayı yenile
                    }
                });
            }
        }

        function showMessage(message, messageType) {
            var alertClass = "alert-info";
            if (messageType === "success") {
                alertClass = "alert-success";
            } else if (messageType === "error") {
                alertClass = "alert-danger";
            }

            var alertHtml = '<div class="alert ' + alertClass + '">' + message + '</div>';
            $(".message-container").html(alertHtml).fadeIn(500).delay(2000).fadeOut(500);
        }
        function updateCartView(cartData) {
            // Sepet görüntüsünü güncelle
            $(".cart-items").html(cartData.itemsCount);
            $(".cart-total").html(cartData.totalPrice);
        }
                
    </script>

    @functions
    {
        string GetStatusName(int status)
        {
            string statusName = string.Empty;
            switch (status)
            {
                case 0:
                    statusName = "Sepette";
                    break;
                case 1:
                    statusName = "Sipariş Alındı";
                    break;
                case 2:
                    statusName = "Hazırlanıyor";
                    break;
                case 3:
                    statusName = "Kargoya Verildi";
                    break;
                case 4:
                    statusName = "Tamamlandı";
                    break;
                default:
                    statusName = "Bilinmeyen Durum";
                    break;
            }
            return statusName;
        }
    }
 }